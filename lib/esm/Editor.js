import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';
import MarkdownPreview from '@uiw/react-markdown-preview';
import TextArea from './components/TextArea';
import Toolbar from './components/Toolbar';
import DragBar from './components/DragBar';
import { getCommands } from './commands';
import { reducer, EditorContext } from './Context';
import "./index.css";

function setGroupPopFalse() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.keys(data).forEach(function (keyname) {
    data[keyname] = false;
  });
  return data;
}

var InternalMDEditor = function InternalMDEditor(props, ref) {
  var _ref = props || {},
      _ref$prefixCls = _ref.prefixCls,
      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,
      className = _ref.className,
      propsValue = _ref.value,
      _ref$commands = _ref.commands,
      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 200 : _ref$height,
      _ref$toolbarHeight = _ref.toolbarHeight,
      toolbarHeight = _ref$toolbarHeight === void 0 ? 29 : _ref$toolbarHeight,
      _ref$enableScroll = _ref.enableScroll,
      enableScroll = _ref$enableScroll === void 0 ? true : _ref$enableScroll,
      _ref$visiableDragbar = _ref.visiableDragbar,
      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,
      _ref$highlightEnable = _ref.highlightEnable,
      highlightEnable = _ref$highlightEnable === void 0 ? true : _ref$highlightEnable,
      _ref$preview = _ref.preview,
      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,
      _ref$fullscreen = _ref.fullscreen,
      fullscreen = _ref$fullscreen === void 0 ? false : _ref$fullscreen,
      _ref$previewOptions = _ref.previewOptions,
      previewOptions = _ref$previewOptions === void 0 ? {} : _ref$previewOptions,
      textareaProps = _ref.textareaProps,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,
      _ref$minHeight = _ref.minHeight,
      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,
      autoFocus = _ref.autoFocus,
      _ref$tabSize = _ref.tabSize,
      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,
      onChange = _ref.onChange,
      hideToolbar = _ref.hideToolbar,
      other = _objectWithoutProperties(_ref, ["prefixCls", "className", "value", "commands", "height", "toolbarHeight", "enableScroll", "visiableDragbar", "highlightEnable", "preview", "fullscreen", "previewOptions", "textareaProps", "maxHeight", "minHeight", "autoFocus", "tabSize", "onChange", "hideToolbar"]);

  var _useReducer = useReducer(reducer, {
    markdown: propsValue,
    preview: previewType,
    height: height,
    highlightEnable: highlightEnable,
    tabSize: tabSize,
    scrollTop: 0,
    scrollTopPreview: 0,
    commands: commands,
    fullscreen: fullscreen,
    onChange: onChange,
    barPopup: {}
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var container = useRef(null);
  var previewRef = useRef(null);
  var enableScrollRef = useRef(enableScroll);
  useImperativeHandle(ref, function () {
    return _objectSpread({}, state);
  });
  useMemo(function () {
    return enableScrollRef.current = enableScroll;
  }, [enableScroll]);
  useEffect(function () {
    var stateInit = {};

    if (container.current) {
      stateInit.container = container.current || undefined;
    }

    stateInit.markdown = propsValue || '';
    stateInit.barPopup = {};

    if (dispatch) {
      dispatch(_objectSpread(_objectSpread({}, state), stateInit));
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  var cls = [className, prefixCls, state.preview ? "".concat(prefixCls, "-show-").concat(state.preview) : null, state.fullscreen ? "".concat(prefixCls, "-fullscreen") : null].filter(Boolean).join(' ').trim();
  useMemo(function () {
    return propsValue !== state.markdown && dispatch({
      markdown: propsValue
    });
  }, [propsValue]);
  useMemo(function () {
    return previewType !== state.preview && dispatch({
      preview: previewType
    });
  }, [previewType]);
  useMemo(function () {
    return height !== state.height && dispatch({
      height: height
    });
  }, [height]);
  useMemo(function () {
    return tabSize !== state.tabSize && dispatch({
      tabSize: tabSize
    });
  }, [tabSize]);
  useMemo(function () {
    return highlightEnable !== state.highlightEnable && dispatch({
      highlightEnable: highlightEnable
    });
  }, [highlightEnable]);
  useMemo(function () {
    return autoFocus !== state.autoFocus && dispatch({
      autoFocus: autoFocus
    });
  }, [autoFocus]);
  useMemo(function () {
    return fullscreen !== state.fullscreen && dispatch({
      fullscreen: fullscreen
    });
  }, [fullscreen]);
  var textareaDomRef = useRef();
  var active = useRef();
  useMemo(function () {
    textareaDomRef.current = state.textareaWarp;

    if (state.textareaWarp) {
      state.textareaWarp.addEventListener('mouseover', function () {
        active.current = 'text';
      });
      state.textareaWarp.addEventListener('mouseleave', function () {
        active.current = 'preview';
      });
    }
  }, [state.textareaWarp]);

  var handleScroll = function handleScroll(e) {
    if (!enableScrollRef.current) return;
    var textareaDom = textareaDomRef.current;
    var previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;

    if (textareaDom && previewDom) {
      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);

      if (e.target === textareaDom && active.current === 'text') {
        previewDom.scrollTop = textareaDom.scrollTop / scale;
      }

      if (e.target === previewDom && active.current === 'preview') {
        textareaDom.scrollTop = previewDom.scrollTop * scale;
      }

      var scrollTop = 0;

      if (active.current === 'text') {
        scrollTop = textareaDom.scrollTop || 0;
      } else if (active.current === 'preview') {
        scrollTop = previewDom.scrollTop || 0;
      }

      dispatch({
        scrollTop: scrollTop
      });
    }
  };

  return /*#__PURE__*/React.createElement(EditorContext.Provider, {
    value: _objectSpread(_objectSpread({}, state), {}, {
      dispatch: dispatch
    })
  }, /*#__PURE__*/React.createElement("div", _extends({
    ref: container,
    className: cls,
    onClick: function onClick() {
      dispatch({
        barPopup: _objectSpread({}, setGroupPopFalse(state.barPopup))
      });
    },
    style: {
      height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height
    }
  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {
    prefixCls: prefixCls,
    height: toolbarHeight
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-content"),
    style: {
      height: state.fullscreen ? "calc(100% - ".concat(toolbarHeight, "px)") : Number(state.height) - toolbarHeight
    }
  }, /(edit|live)/.test(state.preview || '') && /*#__PURE__*/React.createElement(TextArea, _extends({
    className: "".concat(prefixCls, "-input"),
    prefixCls: prefixCls,
    autoFocus: autoFocus
  }, textareaProps, {
    onScroll: handleScroll
  })), /(live|preview)/.test(state.preview || '') && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, previewOptions, {
    onScroll: handleScroll,
    ref: previewRef,
    source: state.markdown || '',
    className: "".concat(prefixCls, "-preview")
  }))), visiableDragbar && !state.fullscreen && /*#__PURE__*/React.createElement(DragBar, {
    prefixCls: prefixCls,
    height: state.height,
    maxHeight: maxHeight,
    minHeight: minHeight,
    onChange: function onChange(newHeight) {
      dispatch({
        height: newHeight
      });
    }
  })));
};

var mdEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);
mdEditor.Markdown = MarkdownPreview;
export default mdEditor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,