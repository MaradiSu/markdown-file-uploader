import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { Fragment, useContext } from 'react';
import { EditorContext } from '../../Context';
import Child from './Child';
import "./index.css";
export default function Toolbar() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prefixCls = props.prefixCls,
      _props$height = props.height,
      height = _props$height === void 0 ? 29 : _props$height;

  var _useContext = useContext(EditorContext),
      commands = _useContext.commands,
      fullscreen = _useContext.fullscreen,
      preview = _useContext.preview,
      _useContext$barPopup = _useContext.barPopup,
      barPopup = _useContext$barPopup === void 0 ? {} : _useContext$barPopup,
      commandOrchestrator = _useContext.commandOrchestrator,
      dispatch = _useContext.dispatch;

  function handleClick(command, name) {
    if (!dispatch) return;
    var state = {
      barPopup: _objectSpread({}, barPopup)
    };

    if (command.keyCommand === 'preview') {
      state.preview = command.value;
    }

    if (command.keyCommand === 'fullscreen') {
      state.fullscreen = !fullscreen;
      document.body.style.overflow = fullscreen ? 'initial' : 'hidden';
    }

    if (commands && command.keyCommand === 'group') {
      commands.forEach(function (item) {
        if (name === item.groupName) {
          state.barPopup[name] = true;
        } else if (item.keyCommand) {
          state.barPopup[item.groupName] = false;
        }
      });
    } else if (name || command.parent) {
      Object.keys(state.barPopup || {}).forEach(function (keyName) {
        state.barPopup[keyName] = false;
      });
    }

    if (Object.keys(state).length) {
      dispatch(_objectSpread({}, state));
    }

    commandOrchestrator && commandOrchestrator.executeCommand(command);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-toolbar"),
    style: {
      height: height
    }
  }, /*#__PURE__*/React.createElement("ul", null, (props.commands || commands || []).map(function (item, idx) {
    if (item.keyCommand === 'divider') {
      return /*#__PURE__*/React.createElement("li", _extends({
        key: idx
      }, item.liProps, {
        className: "".concat(prefixCls, "-toolbar-divider")
      }));
    }

    if (!item.keyCommand) return /*#__PURE__*/React.createElement(Fragment, null);
    var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;
    var childNode = typeof item.children === 'function' ? item.children({
      getState: function getState() {
        return commandOrchestrator.getState();
      },
      textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,
      close: function close() {
        return handleClick({}, item.groupName);
      },
      execute: function execute() {
        return handleClick({
          execute: item.execute
        });
      }
    }) : undefined;
    var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);
    return /*#__PURE__*/React.createElement("li", _extends({
      key: idx
    }, item.liProps, {
      className: activeBtn ? "active" : ''
    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/React.createElement('button', _objectSpread(_objectSpread({
      type: 'button',
      disabled: disabled,
      'data-name': item.name
    }, item.buttonProps), {}, {
      onClick: function onClick(evn) {
        evn.stopPropagation();
        handleClick(item, item.groupName);
      }
    }), item.icon), item.children && /*#__PURE__*/React.createElement(Child, {
      groupName: item.groupName,
      prefixCls: prefixCls,
      children: childNode,
      commands: Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined
    }));
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,