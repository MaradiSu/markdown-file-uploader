import _objectSpread from "@babel/runtime/helpers/objectSpread2";

function getCommands() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resulte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  data.forEach(function (item) {
    if (item.children && Array.isArray(item.children)) {
      resulte = _objectSpread(_objectSpread({}, resulte), getCommands(item.children || []));
    } else if (item.keyCommand && item.shortcuts && item.execute) {
      resulte[item.shortcuts.toLocaleLowerCase()] = item;
    }
  });
  return resulte;
}

export default function shortcutsHandle(e) {
  var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var commandOrchestrator = arguments.length > 2 ? arguments[2] : undefined;
  var data = getCommands(commands || []);
  var shortcuts = [];

  if (e.altKey) {
    shortcuts.push('alt');
  }

  if (e.shiftKey) {
    shortcuts.push('shift');
  }

  if (e.metaKey) {
    shortcuts.push('cmd');
  }

  if (e.ctrlKey) {
    shortcuts.push('ctrl');
  }

  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push(e.key.toLocaleLowerCase());
  }

  if (shortcuts.length < 2) {
    return;
  }

  var equal = !!data[shortcuts.join('+')];
  var command = equal ? data[shortcuts.join('+')] : undefined;
  Object.keys(data).forEach(function (item) {
    var isequal = item.split('+').every(function (v) {
      if (/ctrlcmd/.test(v)) {
        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
      }

      return shortcuts.includes(v);
    });

    if (isequal) {
      command = data[item];
    }
  });

  if (command && commandOrchestrator) {
    e.stopPropagation();
    e.preventDefault();
    commandOrchestrator.executeCommand(command);
    return;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL3Nob3J0Y3V0cy50cyJdLCJuYW1lcyI6WyJnZXRDb21tYW5kcyIsImRhdGEiLCJyZXN1bHRlIiwiZm9yRWFjaCIsIml0ZW0iLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJleGVjdXRlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzaG9ydGN1dHNIYW5kbGUiLCJlIiwiY29tbWFuZHMiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiYWx0S2V5IiwicHVzaCIsInNoaWZ0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJsZW5ndGgiLCJ0ZXN0Iiwia2V5IiwiZXF1YWwiLCJqb2luIiwiY29tbWFuZCIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJpc2VxdWFsIiwic3BsaXQiLCJldmVyeSIsInYiLCJpbmNsdWRlcyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZXhlY3V0ZUNvbW1hbmQiXSwibWFwcGluZ3MiOiI7O0FBRUEsU0FBU0EsV0FBVCxHQUE4RztBQUFBLE1BQXpGQyxJQUF5Rix1RUFBdEUsRUFBc0U7QUFBQSxNQUFsRUMsT0FBa0UsdUVBQTlCLEVBQThCO0FBQzVHRCxFQUFBQSxJQUFJLENBQUNFLE9BQUwsQ0FBYSxVQUFDQyxJQUFELEVBQVU7QUFDckIsUUFBSUEsSUFBSSxDQUFDQyxRQUFMLElBQWlCQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBSSxDQUFDQyxRQUFuQixDQUFyQixFQUFtRDtBQUNqREgsTUFBQUEsT0FBTyxtQ0FBUUEsT0FBUixHQUFvQkYsV0FBVyxDQUFDSSxJQUFJLENBQUNDLFFBQUwsSUFBaUIsRUFBbEIsQ0FBL0IsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJRCxJQUFJLENBQUNJLFVBQUwsSUFBbUJKLElBQUksQ0FBQ0ssU0FBeEIsSUFBcUNMLElBQUksQ0FBQ00sT0FBOUMsRUFBdUQ7QUFDNURSLE1BQUFBLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDSyxTQUFMLENBQWVFLGlCQUFmLEVBQUQsQ0FBUCxHQUE4Q1AsSUFBOUM7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQsZUFBZSxTQUFTVSxlQUFULENBQ2JDLENBRGEsRUFJYjtBQUFBLE1BRkFDLFFBRUEsdUVBRnVCLEVBRXZCO0FBQUEsTUFEQUMsbUJBQ0E7QUFDQSxNQUFNZCxJQUFJLEdBQUdELFdBQVcsQ0FBQ2MsUUFBUSxJQUFJLEVBQWIsQ0FBeEI7QUFDQSxNQUFNTCxTQUE4QixHQUFHLEVBQXZDOztBQUNBLE1BQUlJLENBQUMsQ0FBQ0csTUFBTixFQUFjO0FBQ1pQLElBQUFBLFNBQVMsQ0FBQ1EsSUFBVixDQUFlLEtBQWY7QUFDRDs7QUFDRCxNQUFJSixDQUFDLENBQUNLLFFBQU4sRUFBZ0I7QUFDZFQsSUFBQUEsU0FBUyxDQUFDUSxJQUFWLENBQWUsT0FBZjtBQUNEOztBQUNELE1BQUlKLENBQUMsQ0FBQ00sT0FBTixFQUFlO0FBQ2JWLElBQUFBLFNBQVMsQ0FBQ1EsSUFBVixDQUFlLEtBQWY7QUFDRDs7QUFDRCxNQUFJSixDQUFDLENBQUNPLE9BQU4sRUFBZTtBQUNiWCxJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZSxNQUFmO0FBQ0Q7O0FBQ0QsTUFBSVIsU0FBUyxDQUFDWSxNQUFWLEdBQW1CLENBQW5CLElBQXdCLENBQUMsMkJBQTJCQyxJQUEzQixDQUFnQ1QsQ0FBQyxDQUFDVSxHQUFGLENBQU1aLGlCQUFOLEVBQWhDLENBQTdCLEVBQXlGO0FBQ3ZGRixJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZUosQ0FBQyxDQUFDVSxHQUFGLENBQU1aLGlCQUFOLEVBQWY7QUFDRDs7QUFDRCxNQUFJRixTQUFTLENBQUNZLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEI7QUFDRDs7QUFFRCxNQUFJRyxLQUFLLEdBQUcsQ0FBQyxDQUFDdkIsSUFBSSxDQUFDUSxTQUFTLENBQUNnQixJQUFWLENBQWUsR0FBZixDQUFELENBQWxCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRixLQUFLLEdBQUd2QixJQUFJLENBQUNRLFNBQVMsQ0FBQ2dCLElBQVYsQ0FBZSxHQUFmLENBQUQsQ0FBUCxHQUErQkUsU0FBbEQ7QUFFQUMsRUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVk1QixJQUFaLEVBQWtCRSxPQUFsQixDQUEwQixVQUFDQyxJQUFELEVBQVU7QUFDbEMsUUFBTTBCLE9BQU8sR0FBRzFCLElBQUksQ0FBQzJCLEtBQUwsQ0FBVyxHQUFYLEVBQWdCQyxLQUFoQixDQUFzQixVQUFDQyxDQUFELEVBQU87QUFDM0MsVUFBSSxVQUFVWCxJQUFWLENBQWVXLENBQWYsQ0FBSixFQUF1QjtBQUNyQixlQUFPeEIsU0FBUyxDQUFDeUIsUUFBVixDQUFtQixNQUFuQixLQUE4QnpCLFNBQVMsQ0FBQ3lCLFFBQVYsQ0FBbUIsS0FBbkIsQ0FBckM7QUFDRDs7QUFDRCxhQUFPekIsU0FBUyxDQUFDeUIsUUFBVixDQUFtQkQsQ0FBbkIsQ0FBUDtBQUNELEtBTGUsQ0FBaEI7O0FBTUEsUUFBSUgsT0FBSixFQUFhO0FBQ1hKLE1BQUFBLE9BQU8sR0FBR3pCLElBQUksQ0FBQ0csSUFBRCxDQUFkO0FBQ0Q7QUFDRixHQVZEOztBQVdBLE1BQUlzQixPQUFPLElBQUlYLG1CQUFmLEVBQW9DO0FBQ2xDRixJQUFBQSxDQUFDLENBQUNzQixlQUFGO0FBQ0F0QixJQUFBQSxDQUFDLENBQUN1QixjQUFGO0FBQ0FyQixJQUFBQSxtQkFBbUIsQ0FBQ3NCLGNBQXBCLENBQW1DWCxPQUFuQztBQUNBO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21tYW5kLCBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XHJcblxyXG5mdW5jdGlvbiBnZXRDb21tYW5kcyhkYXRhOiBJQ29tbWFuZFtdID0gW10sIHJlc3VsdGU6IFJlY29yZDxzdHJpbmcsIElDb21tYW5kPiA9IHt9KTogUmVjb3JkPHN0cmluZywgSUNvbW1hbmQ+IHtcclxuICBkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoaXRlbS5jaGlsZHJlbikpIHtcclxuICAgICAgcmVzdWx0ZSA9IHsgLi4ucmVzdWx0ZSwgLi4uZ2V0Q29tbWFuZHMoaXRlbS5jaGlsZHJlbiB8fCBbXSkgfTtcclxuICAgIH0gZWxzZSBpZiAoaXRlbS5rZXlDb21tYW5kICYmIGl0ZW0uc2hvcnRjdXRzICYmIGl0ZW0uZXhlY3V0ZSkge1xyXG4gICAgICByZXN1bHRlW2l0ZW0uc2hvcnRjdXRzLnRvTG9jYWxlTG93ZXJDYXNlKCldID0gaXRlbTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0ZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvcnRjdXRzSGFuZGxlKFxyXG4gIGU6IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4sXHJcbiAgY29tbWFuZHM6IElDb21tYW5kW10gPSBbXSxcclxuICBjb21tYW5kT3JjaGVzdHJhdG9yPzogVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yLFxyXG4pIHtcclxuICBjb25zdCBkYXRhID0gZ2V0Q29tbWFuZHMoY29tbWFuZHMgfHwgW10pO1xyXG4gIGNvbnN0IHNob3J0Y3V0czogKHN0cmluZyB8IG51bWJlcilbXSA9IFtdO1xyXG4gIGlmIChlLmFsdEtleSkge1xyXG4gICAgc2hvcnRjdXRzLnB1c2goJ2FsdCcpO1xyXG4gIH1cclxuICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgc2hvcnRjdXRzLnB1c2goJ3NoaWZ0Jyk7XHJcbiAgfVxyXG4gIGlmIChlLm1ldGFLZXkpIHtcclxuICAgIHNob3J0Y3V0cy5wdXNoKCdjbWQnKTtcclxuICB9XHJcbiAgaWYgKGUuY3RybEtleSkge1xyXG4gICAgc2hvcnRjdXRzLnB1c2goJ2N0cmwnKTtcclxuICB9XHJcbiAgaWYgKHNob3J0Y3V0cy5sZW5ndGggPiAwICYmICEvKGNvbnRyb2x8YWx0fG1ldGF8c2hpZnQpLy50ZXN0KGUua2V5LnRvTG9jYWxlTG93ZXJDYXNlKCkpKSB7XHJcbiAgICBzaG9ydGN1dHMucHVzaChlLmtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcclxuICB9XHJcbiAgaWYgKHNob3J0Y3V0cy5sZW5ndGggPCAyKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsZXQgZXF1YWwgPSAhIWRhdGFbc2hvcnRjdXRzLmpvaW4oJysnKV07XHJcbiAgbGV0IGNvbW1hbmQgPSBlcXVhbCA/IGRhdGFbc2hvcnRjdXRzLmpvaW4oJysnKV0gOiB1bmRlZmluZWQ7XHJcblxyXG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgIGNvbnN0IGlzZXF1YWwgPSBpdGVtLnNwbGl0KCcrJykuZXZlcnkoKHYpID0+IHtcclxuICAgICAgaWYgKC9jdHJsY21kLy50ZXN0KHYpKSB7XHJcbiAgICAgICAgcmV0dXJuIHNob3J0Y3V0cy5pbmNsdWRlcygnY3RybCcpIHx8IHNob3J0Y3V0cy5pbmNsdWRlcygnY21kJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNob3J0Y3V0cy5pbmNsdWRlcyh2KTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGlzZXF1YWwpIHtcclxuICAgICAgY29tbWFuZCA9IGRhdGFbaXRlbV07XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaWYgKGNvbW1hbmQgJiYgY29tbWFuZE9yY2hlc3RyYXRvcikge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbW1hbmRPcmNoZXN0cmF0b3IuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==