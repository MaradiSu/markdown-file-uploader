import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useMemo, useContext } from 'react';
import { EditorContext } from '../../Context';
import "./index.css";
import Markdown from './Markdown';
import Textarea from './Textarea';
export default function TextArea(props) {
  var _ref = props || {},
      prefixCls = _ref.prefixCls,
      className = _ref.className,
      onScroll = _ref.onScroll,
      otherProps = _objectWithoutProperties(_ref, ["prefixCls", "className", "onScroll"]);

  var _useContext = useContext(EditorContext),
      scrollTop = _useContext.scrollTop,
      dispatch = _useContext.dispatch;

  var warp = /*#__PURE__*/React.createRef();
  useEffect(function () {
    var state = {};

    if (warp.current) {
      state.textareaWarp = warp.current || undefined;
      warp.current.scrollTop = scrollTop || 0;
    }

    if (dispatch) {
      dispatch(_objectSpread({}, state));
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return useMemo(function () {
    return /*#__PURE__*/React.createElement("div", {
      ref: warp,
      className: "".concat(prefixCls, "-aree ").concat(className || ''),
      onScroll: onScroll
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-text")
    }, /*#__PURE__*/React.createElement(Markdown, {
      prefixCls: prefixCls
    }), /*#__PURE__*/React.createElement(Textarea, _extends({
      prefixCls: prefixCls
    }, otherProps))));
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZU1lbW8iLCJ1c2VDb250ZXh0IiwiRWRpdG9yQ29udGV4dCIsIk1hcmtkb3duIiwiVGV4dGFyZWEiLCJUZXh0QXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwiY2xhc3NOYW1lIiwib25TY3JvbGwiLCJvdGhlclByb3BzIiwic2Nyb2xsVG9wIiwiZGlzcGF0Y2giLCJ3YXJwIiwiY3JlYXRlUmVmIiwic3RhdGUiLCJjdXJyZW50IiwidGV4dGFyZWFXYXJwIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxTQUFoQixFQUEyQkMsT0FBM0IsRUFBb0NDLFVBQXBDLFFBQXNELE9BQXREO0FBQ0EsU0FBU0MsYUFBVCxRQUE0QyxlQUE1QztBQUVBO0FBRUEsT0FBT0MsUUFBUCxNQUFxQixZQUFyQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsWUFBckI7QUFjQSxlQUFlLFNBQVNDLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXlDO0FBQ3RELGFBQTBEQSxLQUFLLElBQUksRUFBbkU7QUFBQSxNQUFRQyxTQUFSLFFBQVFBLFNBQVI7QUFBQSxNQUFtQkMsU0FBbkIsUUFBbUJBLFNBQW5CO0FBQUEsTUFBOEJDLFFBQTlCLFFBQThCQSxRQUE5QjtBQUFBLE1BQTJDQyxVQUEzQzs7QUFDQSxvQkFBZ0NULFVBQVUsQ0FBQ0MsYUFBRCxDQUExQztBQUFBLE1BQVFTLFNBQVIsZUFBUUEsU0FBUjtBQUFBLE1BQW1CQyxRQUFuQixlQUFtQkEsUUFBbkI7O0FBQ0EsTUFBTUMsSUFBSSxnQkFBR2YsS0FBSyxDQUFDZ0IsU0FBTixFQUFiO0FBQ0FmLEVBQUFBLFNBQVMsQ0FBQyxZQUFNO0FBQ2QsUUFBTWdCLEtBQW1CLEdBQUcsRUFBNUI7O0FBQ0EsUUFBSUYsSUFBSSxDQUFDRyxPQUFULEVBQWtCO0FBQ2hCRCxNQUFBQSxLQUFLLENBQUNFLFlBQU4sR0FBcUJKLElBQUksQ0FBQ0csT0FBTCxJQUFnQkUsU0FBckM7QUFDQUwsTUFBQUEsSUFBSSxDQUFDRyxPQUFMLENBQWFMLFNBQWIsR0FBeUJBLFNBQVMsSUFBSSxDQUF0QztBQUNEOztBQUNELFFBQUlDLFFBQUosRUFBYztBQUNaQSxNQUFBQSxRQUFRLG1CQUFNRyxLQUFOLEVBQVI7QUFDRCxLQVJhLENBU2Q7O0FBQ0QsR0FWUSxFQVVOLEVBVk0sQ0FBVDtBQVdBLFNBQU9mLE9BQU8sQ0FDWjtBQUFBLHdCQUNFO0FBQUssTUFBQSxHQUFHLEVBQUVhLElBQVY7QUFBZ0IsTUFBQSxTQUFTLFlBQUtOLFNBQUwsbUJBQXVCQyxTQUFTLElBQUksRUFBcEMsQ0FBekI7QUFBbUUsTUFBQSxRQUFRLEVBQUVDO0FBQTdFLG9CQUNFO0FBQUssTUFBQSxTQUFTLFlBQUtGLFNBQUw7QUFBZCxvQkFDRSxvQkFBQyxRQUFEO0FBQVUsTUFBQSxTQUFTLEVBQUVBO0FBQXJCLE1BREYsZUFFRSxvQkFBQyxRQUFEO0FBQVUsTUFBQSxTQUFTLEVBQUVBO0FBQXJCLE9BQW9DRyxVQUFwQyxFQUZGLENBREYsQ0FERjtBQUFBLEdBRFksRUFTWjtBQUNBLElBVlksQ0FBZDtBQVlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRWRpdG9yQ29udGV4dCwgQ29udGV4dFN0b3JlIH0gZnJvbSAnLi4vLi4vQ29udGV4dCc7XHJcbmltcG9ydCB7IElQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0ICcuL2luZGV4Lmxlc3MnO1xyXG5cclxuaW1wb3J0IE1hcmtkb3duIGZyb20gJy4vTWFya2Rvd24nO1xyXG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElUZXh0QXJlYVByb3BzXHJcbiAgZXh0ZW5kcyBPbWl0PFJlYWN0LlRleHRhcmVhSFRNTEF0dHJpYnV0ZXM8SFRNTFRleHRBcmVhRWxlbWVudD4sICd2YWx1ZScgfCAnb25DaGFuZ2UnIHwgJ29uU2Nyb2xsJz4sXHJcbiAgICBJUHJvcHMge1xyXG4gIG9uU2Nyb2xsPzogKGU6IFJlYWN0LlVJRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB2b2lkO1xyXG4gIHZhbHVlPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBUZXh0QXJlYVJlZiA9IHtcclxuICB0ZXh0PzogSFRNTFRleHRBcmVhRWxlbWVudDtcclxuICB3YXJwPzogSFRNTERpdkVsZW1lbnQ7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0QXJlYShwcm9wczogSVRleHRBcmVhUHJvcHMpIHtcclxuICBjb25zdCB7IHByZWZpeENscywgY2xhc3NOYW1lLCBvblNjcm9sbCwgLi4ub3RoZXJQcm9wcyB9ID0gcHJvcHMgfHwge307XHJcbiAgY29uc3QgeyBzY3JvbGxUb3AsIGRpc3BhdGNoIH0gPSB1c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xyXG4gIGNvbnN0IHdhcnAgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IHN0YXRlOiBDb250ZXh0U3RvcmUgPSB7fTtcclxuICAgIGlmICh3YXJwLmN1cnJlbnQpIHtcclxuICAgICAgc3RhdGUudGV4dGFyZWFXYXJwID0gd2FycC5jdXJyZW50IHx8IHVuZGVmaW5lZDtcclxuICAgICAgd2FycC5jdXJyZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcCB8fCAwO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpc3BhdGNoKSB7XHJcbiAgICAgIGRpc3BhdGNoKHsgLi4uc3RhdGUgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXHJcbiAgfSwgW10pO1xyXG4gIHJldHVybiB1c2VNZW1vKFxyXG4gICAgKCkgPT4gKFxyXG4gICAgICA8ZGl2IHJlZj17d2FycH0gY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWFyZWUgJHtjbGFzc05hbWUgfHwgJyd9YH0gb25TY3JvbGw9e29uU2Nyb2xsfT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS10ZXh0YH0+XHJcbiAgICAgICAgICA8TWFya2Rvd24gcHJlZml4Q2xzPXtwcmVmaXhDbHN9IC8+XHJcbiAgICAgICAgICA8VGV4dGFyZWEgcHJlZml4Q2xzPXtwcmVmaXhDbHN9IHsuLi5vdGhlclByb3BzfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICksXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXHJcbiAgICBbXSxcclxuICApO1xyXG59XHJcbiJdfQ==