import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext, useEffect, useMemo } from 'react';
import { EditorContext } from '../../Context';
import { TextAreaCommandOrchestrator } from '../../commands';
import handleKeyDown from './handleKeyDown';
import shortcuts from './shortcuts';
import "./index.css";
export default function Textarea(props) {
  var prefixCls = props.prefixCls,
      other = _objectWithoutProperties(props, ["prefixCls"]);

  var _useContext = useContext(EditorContext),
      markdown = _useContext.markdown,
      commands = _useContext.commands,
      tabSize = _useContext.tabSize,
      _onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = /*#__PURE__*/React.createRef();
  var executeRef = React.useRef();
  useEffect(function () {
    if (textRef.current && dispatch) {
      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);
      executeRef.current = commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return useMemo(function () {
    return /*#__PURE__*/React.createElement("textarea", _extends({
      spellCheck: false
    }, other, {
      ref: textRef,
      className: "".concat(prefixCls, "-text-input ").concat(other.className ? other.className : ''),
      value: markdown,
      onScroll: props.onScroll,
      onKeyDown: function onKeyDown(e) {
        handleKeyDown(e, tabSize);
        shortcuts(e, commands, executeRef.current);
      },
      onChange: function onChange(e) {
        dispatch && dispatch({
          markdown: e.target.value
        });
        _onChange && _onChange(e.target.value);
      }
    }));
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [markdown]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL1RleHRhcmVhLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwiRWRpdG9yQ29udGV4dCIsIlRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvciIsImhhbmRsZUtleURvd24iLCJzaG9ydGN1dHMiLCJUZXh0YXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwib3RoZXIiLCJtYXJrZG93biIsImNvbW1hbmRzIiwidGFiU2l6ZSIsIm9uQ2hhbmdlIiwiZGlzcGF0Y2giLCJ0ZXh0UmVmIiwiY3JlYXRlUmVmIiwiZXhlY3V0ZVJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwidGV4dGFyZWEiLCJjbGFzc05hbWUiLCJvblNjcm9sbCIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxVQUFoQixFQUE0QkMsU0FBNUIsRUFBdUNDLE9BQXZDLFFBQXNELE9BQXREO0FBRUEsU0FBU0MsYUFBVCxRQUE4QixlQUE5QjtBQUNBLFNBQVNDLDJCQUFULFFBQTRDLGdCQUE1QztBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBO0FBUUEsZUFBZSxTQUFTQyxRQUFULENBQWtCQyxLQUFsQixFQUF3QztBQUNyRCxNQUFRQyxTQUFSLEdBQWdDRCxLQUFoQyxDQUFRQyxTQUFSO0FBQUEsTUFBc0JDLEtBQXRCLDRCQUFnQ0YsS0FBaEM7O0FBQ0Esb0JBQTREUixVQUFVLENBQUNHLGFBQUQsQ0FBdEU7QUFBQSxNQUFRUSxRQUFSLGVBQVFBLFFBQVI7QUFBQSxNQUFrQkMsUUFBbEIsZUFBa0JBLFFBQWxCO0FBQUEsTUFBNEJDLE9BQTVCLGVBQTRCQSxPQUE1QjtBQUFBLE1BQXFDQyxTQUFyQyxlQUFxQ0EsUUFBckM7QUFBQSxNQUErQ0MsUUFBL0MsZUFBK0NBLFFBQS9DOztBQUNBLE1BQU1DLE9BQU8sZ0JBQUdqQixLQUFLLENBQUNrQixTQUFOLEVBQWhCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHbkIsS0FBSyxDQUFDb0IsTUFBTixFQUFuQjtBQUNBbEIsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZCxRQUFJZSxPQUFPLENBQUNJLE9BQVIsSUFBbUJMLFFBQXZCLEVBQWlDO0FBQy9CLFVBQU1NLG1CQUFtQixHQUFHLElBQUlqQiwyQkFBSixDQUFnQ1ksT0FBTyxDQUFDSSxPQUF4QyxDQUE1QjtBQUNBRixNQUFBQSxVQUFVLENBQUNFLE9BQVgsR0FBcUJDLG1CQUFyQjtBQUNBTixNQUFBQSxRQUFRLENBQUM7QUFBRU8sUUFBQUEsUUFBUSxFQUFFTixPQUFPLENBQUNJLE9BQXBCO0FBQTZCQyxRQUFBQSxtQkFBbUIsRUFBbkJBO0FBQTdCLE9BQUQsQ0FBUjtBQUNELEtBTGEsQ0FNZDs7QUFDRCxHQVBRLEVBT04sRUFQTSxDQUFUO0FBUUEsU0FBT25CLE9BQU8sQ0FDWjtBQUFBLHdCQUNFO0FBQ0UsTUFBQSxVQUFVLEVBQUU7QUFEZCxPQUVNUSxLQUZOO0FBR0UsTUFBQSxHQUFHLEVBQUVNLE9BSFA7QUFJRSxNQUFBLFNBQVMsWUFBS1AsU0FBTCx5QkFBNkJDLEtBQUssQ0FBQ2EsU0FBTixHQUFrQmIsS0FBSyxDQUFDYSxTQUF4QixHQUFvQyxFQUFqRSxDQUpYO0FBS0UsTUFBQSxLQUFLLEVBQUVaLFFBTFQ7QUFNRSxNQUFBLFFBQVEsRUFBRUgsS0FBSyxDQUFDZ0IsUUFObEI7QUFPRSxNQUFBLFNBQVMsRUFBRSxtQkFBQ0MsQ0FBRCxFQUFPO0FBQ2hCcEIsUUFBQUEsYUFBYSxDQUFDb0IsQ0FBRCxFQUFJWixPQUFKLENBQWI7QUFDQVAsUUFBQUEsU0FBUyxDQUFDbUIsQ0FBRCxFQUFJYixRQUFKLEVBQWNNLFVBQVUsQ0FBQ0UsT0FBekIsQ0FBVDtBQUNELE9BVkg7QUFXRSxNQUFBLFFBQVEsRUFBRSxrQkFBQ0ssQ0FBRCxFQUFPO0FBQ2ZWLFFBQUFBLFFBQVEsSUFBSUEsUUFBUSxDQUFDO0FBQUVKLFVBQUFBLFFBQVEsRUFBRWMsQ0FBQyxDQUFDQyxNQUFGLENBQVNDO0FBQXJCLFNBQUQsQ0FBcEI7QUFDQWIsUUFBQUEsU0FBUSxJQUFJQSxTQUFRLENBQUNXLENBQUMsQ0FBQ0MsTUFBRixDQUFTQyxLQUFWLENBQXBCO0FBQ0Q7QUFkSCxPQURGO0FBQUEsR0FEWSxFQW1CWjtBQUNBLEdBQUNoQixRQUFELENBcEJZLENBQWQ7QUFzQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBJUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IEVkaXRvckNvbnRleHQgfSBmcm9tICcuLi8uLi9Db250ZXh0JztcclxuaW1wb3J0IHsgVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMnO1xyXG5pbXBvcnQgaGFuZGxlS2V5RG93biBmcm9tICcuL2hhbmRsZUtleURvd24nO1xyXG5pbXBvcnQgc2hvcnRjdXRzIGZyb20gJy4vc2hvcnRjdXRzJztcclxuaW1wb3J0ICcuL2luZGV4Lmxlc3MnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZXh0QXJlYVByb3BzXHJcbiAgZXh0ZW5kcyBPbWl0PFJlYWN0LlRleHRhcmVhSFRNTEF0dHJpYnV0ZXM8SFRNTFRleHRBcmVhRWxlbWVudD4sICd2YWx1ZScgfCAnb25DaGFuZ2UnPixcclxuICAgIElQcm9wcyB7XHJcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+KSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0YXJlYShwcm9wczogVGV4dEFyZWFQcm9wcykge1xyXG4gIGNvbnN0IHsgcHJlZml4Q2xzLCAuLi5vdGhlciB9ID0gcHJvcHM7XHJcbiAgY29uc3QgeyBtYXJrZG93biwgY29tbWFuZHMsIHRhYlNpemUsIG9uQ2hhbmdlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcclxuICBjb25zdCB0ZXh0UmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KCk7XHJcbiAgY29uc3QgZXhlY3V0ZVJlZiA9IFJlYWN0LnVzZVJlZjxUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3I+KCk7XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcclxuICAgICAgY29uc3QgY29tbWFuZE9yY2hlc3RyYXRvciA9IG5ldyBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IodGV4dFJlZi5jdXJyZW50KTtcclxuICAgICAgZXhlY3V0ZVJlZi5jdXJyZW50ID0gY29tbWFuZE9yY2hlc3RyYXRvcjtcclxuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYTogdGV4dFJlZi5jdXJyZW50LCBjb21tYW5kT3JjaGVzdHJhdG9yIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xyXG4gIH0sIFtdKTtcclxuICByZXR1cm4gdXNlTWVtbyhcclxuICAgICgpID0+IChcclxuICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgc3BlbGxDaGVjaz17ZmFsc2V9XHJcbiAgICAgICAgey4uLm90aGVyfVxyXG4gICAgICAgIHJlZj17dGV4dFJlZn1cclxuICAgICAgICBjbGFzc05hbWU9e2Ake3ByZWZpeENsc30tdGV4dC1pbnB1dCAke290aGVyLmNsYXNzTmFtZSA/IG90aGVyLmNsYXNzTmFtZSA6ICcnfWB9XHJcbiAgICAgICAgdmFsdWU9e21hcmtkb3dufVxyXG4gICAgICAgIG9uU2Nyb2xsPXtwcm9wcy5vblNjcm9sbH1cclxuICAgICAgICBvbktleURvd249eyhlKSA9PiB7XHJcbiAgICAgICAgICBoYW5kbGVLZXlEb3duKGUsIHRhYlNpemUpO1xyXG4gICAgICAgICAgc2hvcnRjdXRzKGUsIGNvbW1hbmRzLCBleGVjdXRlUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIH19XHJcbiAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XHJcbiAgICAgICAgICBkaXNwYXRjaCAmJiBkaXNwYXRjaCh7IG1hcmtkb3duOiBlLnRhcmdldC52YWx1ZSB9KTtcclxuICAgICAgICAgIG9uQ2hhbmdlICYmIG9uQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICB9fVxyXG4gICAgICAvPlxyXG4gICAgKSxcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcclxuICAgIFttYXJrZG93bl0sXHJcbiAgKTtcclxufVxyXG4iXX0=