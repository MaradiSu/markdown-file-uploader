"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Toolbar;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var _Context = require("../../Context");

var _Child = _interopRequireDefault(require("./Child"));

function Toolbar() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prefixCls = props.prefixCls,
      _props$height = props.height,
      height = _props$height === void 0 ? 29 : _props$height;

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      commands = _useContext.commands,
      fullscreen = _useContext.fullscreen,
      preview = _useContext.preview,
      _useContext$barPopup = _useContext.barPopup,
      barPopup = _useContext$barPopup === void 0 ? {} : _useContext$barPopup,
      commandOrchestrator = _useContext.commandOrchestrator,
      dispatch = _useContext.dispatch;

  function handleClick(command, name) {
    if (!dispatch) return;
    var state = {
      barPopup: (0, _objectSpread2.default)({}, barPopup)
    };

    if (command.keyCommand === 'preview') {
      state.preview = command.value;
    }

    if (command.keyCommand === 'fullscreen') {
      state.fullscreen = !fullscreen;
      document.body.style.overflow = fullscreen ? 'initial' : 'hidden';
    }

    if (commands && command.keyCommand === 'group') {
      commands.forEach(function (item) {
        if (name === item.groupName) {
          state.barPopup[name] = true;
        } else if (item.keyCommand) {
          state.barPopup[item.groupName] = false;
        }
      });
    } else if (name || command.parent) {
      Object.keys(state.barPopup || {}).forEach(function (keyName) {
        state.barPopup[keyName] = false;
      });
    }

    if (Object.keys(state).length) {
      dispatch((0, _objectSpread2.default)({}, state));
    }

    commandOrchestrator && commandOrchestrator.executeCommand(command);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-toolbar"),
    style: {
      height: height
    }
  }, /*#__PURE__*/_react.default.createElement("ul", null, (props.commands || commands || []).map(function (item, idx) {
    if (item.keyCommand === 'divider') {
      return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({
        key: idx
      }, item.liProps, {
        className: "".concat(prefixCls, "-toolbar-divider")
      }));
    }

    if (!item.keyCommand) return /*#__PURE__*/_react.default.createElement(_react.Fragment, null);
    var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;
    var childNode = typeof item.children === 'function' ? item.children({
      getState: function getState() {
        return commandOrchestrator.getState();
      },
      textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,
      close: function close() {
        return handleClick({}, item.groupName);
      },
      execute: function execute() {
        return handleClick({
          execute: item.execute
        });
      }
    }) : undefined;
    var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);
    return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({
      key: idx
    }, item.liProps, {
      className: activeBtn ? "active" : ''
    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/_react.default.createElement('button', (0, _objectSpread2.default)((0, _objectSpread2.default)({
      type: 'button',
      disabled: disabled,
      'data-name': item.name
    }, item.buttonProps), {}, {
      onClick: function onClick(evn) {
        evn.stopPropagation();
        handleClick(item, item.groupName);
      }
    }), item.icon), item.children && /*#__PURE__*/_react.default.createElement(_Child.default, {
      groupName: item.groupName,
      prefixCls: prefixCls,
      children: childNode,
      commands: Array.isArray(item.children) && typeof item.children !== 'function' ? item.children : undefined
    }));
  })));
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,