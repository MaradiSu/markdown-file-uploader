"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var DragBar = function DragBar(props) {
  var _ref = props || {},
      prefixCls = _ref.prefixCls,
      onChange = _ref.onChange;

  var dragRef = (0, _react.useRef)();

  function handleMouseMove(event) {
    if (dragRef.current) {
      var newHeight = dragRef.current.height + event.clientY - dragRef.current.dragY;

      if (newHeight >= props.minHeight && newHeight <= props.maxHeight) {
        onChange && onChange(dragRef.current.height + (event.clientY - dragRef.current.dragY));
      }
    }
  }

  function handleMouseUp() {
    dragRef.current = undefined;
  }

  function handleMouseDown(event) {
    dragRef.current = {
      height: props.height,
      dragY: event.clientY
    };
  }

  (0, _react.useEffect)(function () {
    if (document) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return function () {
      if (document) {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      }
    };
  }, []);
  var svg = (0, _react.useMemo)(function () {
    return /*#__PURE__*/_react.default.createElement("svg", {
      viewBox: "0 0 512 512",
      height: "100%"
    }, /*#__PURE__*/_react.default.createElement("path", {
      fill: "currentColor",
      d: "M304 256c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm120-48c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm-336 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z"
    }));
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-bar"),
    onMouseDown: handleMouseDown
  }, svg);
};

var _default = DragBar;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0RyYWdCYXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbIkRyYWdCYXIiLCJwcm9wcyIsInByZWZpeENscyIsIm9uQ2hhbmdlIiwiZHJhZ1JlZiIsImhhbmRsZU1vdXNlTW92ZSIsImV2ZW50IiwiY3VycmVudCIsIm5ld0hlaWdodCIsImhlaWdodCIsImNsaWVudFkiLCJkcmFnWSIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsImhhbmRsZU1vdXNlVXAiLCJ1bmRlZmluZWQiLCJoYW5kbGVNb3VzZURvd24iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3ZnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFXQSxJQUFNQSxPQUFnQyxHQUFHLFNBQW5DQSxPQUFtQyxDQUFDQyxLQUFELEVBQVc7QUFDbEQsYUFBZ0NBLEtBQUssSUFBSSxFQUF6QztBQUFBLE1BQVFDLFNBQVIsUUFBUUEsU0FBUjtBQUFBLE1BQW1CQyxRQUFuQixRQUFtQkEsUUFBbkI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHLG9CQUFoQjs7QUFDQSxXQUFTQyxlQUFULENBQXlCQyxLQUF6QixFQUE0QztBQUMxQyxRQUFJRixPQUFPLENBQUNHLE9BQVosRUFBcUI7QUFDbkIsVUFBTUMsU0FBUyxHQUFHSixPQUFPLENBQUNHLE9BQVIsQ0FBZ0JFLE1BQWhCLEdBQXlCSCxLQUFLLENBQUNJLE9BQS9CLEdBQXlDTixPQUFPLENBQUNHLE9BQVIsQ0FBZ0JJLEtBQTNFOztBQUNBLFVBQUlILFNBQVMsSUFBSVAsS0FBSyxDQUFDVyxTQUFuQixJQUFnQ0osU0FBUyxJQUFJUCxLQUFLLENBQUNZLFNBQXZELEVBQWtFO0FBQ2hFVixRQUFBQSxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDRyxPQUFSLENBQWdCRSxNQUFoQixJQUEwQkgsS0FBSyxDQUFDSSxPQUFOLEdBQWdCTixPQUFPLENBQUNHLE9BQVIsQ0FBZ0JJLEtBQTFELENBQUQsQ0FBcEI7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsV0FBU0csYUFBVCxHQUF5QjtBQUN2QlYsSUFBQUEsT0FBTyxDQUFDRyxPQUFSLEdBQWtCUSxTQUFsQjtBQUNEOztBQUNELFdBQVNDLGVBQVQsQ0FBeUJWLEtBQXpCLEVBQThFO0FBQzVFRixJQUFBQSxPQUFPLENBQUNHLE9BQVIsR0FBa0I7QUFDaEJFLE1BQUFBLE1BQU0sRUFBRVIsS0FBSyxDQUFDUSxNQURFO0FBRWhCRSxNQUFBQSxLQUFLLEVBQUVMLEtBQUssQ0FBQ0k7QUFGRyxLQUFsQjtBQUlEOztBQUVELHdCQUFVLFlBQU07QUFDZCxRQUFJTyxRQUFKLEVBQWM7QUFDWkEsTUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixXQUExQixFQUF1Q2IsZUFBdkM7QUFDQVksTUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixTQUExQixFQUFxQ0osYUFBckM7QUFDRDs7QUFDRCxXQUFPLFlBQU07QUFDWCxVQUFJRyxRQUFKLEVBQWM7QUFDWkEsUUFBQUEsUUFBUSxDQUFDRSxtQkFBVCxDQUE2QixXQUE3QixFQUEwQ2QsZUFBMUM7QUFDQVksUUFBQUEsUUFBUSxDQUFDRSxtQkFBVCxDQUE2QixTQUE3QixFQUF3Q0wsYUFBeEM7QUFDRDtBQUNGLEtBTEQ7QUFNRCxHQVhELEVBV0csRUFYSDtBQVlBLE1BQU1NLEdBQUcsR0FBRyxvQkFDVjtBQUFBLHdCQUNFO0FBQUssTUFBQSxPQUFPLEVBQUMsYUFBYjtBQUEyQixNQUFBLE1BQU0sRUFBQztBQUFsQyxvQkFDRTtBQUNFLE1BQUEsSUFBSSxFQUFDLGNBRFA7QUFFRSxNQUFBLENBQUMsRUFBQztBQUZKLE1BREYsQ0FERjtBQUFBLEdBRFUsRUFTVixFQVRVLENBQVo7QUFXQSxzQkFDRTtBQUFLLElBQUEsU0FBUyxZQUFLbEIsU0FBTCxTQUFkO0FBQW9DLElBQUEsV0FBVyxFQUFFYztBQUFqRCxLQUNHSSxHQURILENBREY7QUFLRCxDQWpERDs7ZUFtRGVwQixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBJUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCAnLi9pbmRleC5sZXNzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURyYWdCYXJQcm9wcyBleHRlbmRzIElQcm9wcyB7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgbWF4SGVpZ2h0OiBudW1iZXI7XHJcbiAgbWluSGVpZ2h0OiBudW1iZXI7XHJcbiAgb25DaGFuZ2U6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBEcmFnQmFyOiBSZWFjdC5GQzxJRHJhZ0JhclByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgcHJlZml4Q2xzLCBvbkNoYW5nZSB9ID0gcHJvcHMgfHwge307XHJcbiAgY29uc3QgZHJhZ1JlZiA9IHVzZVJlZjx7IGhlaWdodDogbnVtYmVyOyBkcmFnWTogbnVtYmVyIH0+KCk7XHJcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBpZiAoZHJhZ1JlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGRyYWdSZWYuY3VycmVudC5oZWlnaHQgKyBldmVudC5jbGllbnRZIC0gZHJhZ1JlZi5jdXJyZW50LmRyYWdZO1xyXG4gICAgICBpZiAobmV3SGVpZ2h0ID49IHByb3BzLm1pbkhlaWdodCAmJiBuZXdIZWlnaHQgPD0gcHJvcHMubWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgb25DaGFuZ2UgJiYgb25DaGFuZ2UoZHJhZ1JlZi5jdXJyZW50LmhlaWdodCArIChldmVudC5jbGllbnRZIC0gZHJhZ1JlZi5jdXJyZW50LmRyYWdZKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VVcCgpIHtcclxuICAgIGRyYWdSZWYuY3VycmVudCA9IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50LCBNb3VzZUV2ZW50Pikge1xyXG4gICAgZHJhZ1JlZi5jdXJyZW50ID0ge1xyXG4gICAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcclxuICAgICAgZHJhZ1k6IGV2ZW50LmNsaWVudFksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChkb2N1bWVudCkge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBpZiAoZG9jdW1lbnQpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcbiAgY29uc3Qgc3ZnID0gdXNlTWVtbyhcclxuICAgICgpID0+IChcclxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiBoZWlnaHQ9XCIxMDAlXCI+XHJcbiAgICAgICAgPHBhdGhcclxuICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxyXG4gICAgICAgICAgZD1cIk0zMDQgMjU2YzAgMjYuNS0yMS41IDQ4LTQ4IDQ4cy00OC0yMS41LTQ4LTQ4IDIxLjUtNDggNDgtNDggNDggMjEuNSA0OCA0OHptMTIwLTQ4Yy0yNi41IDAtNDggMjEuNS00OCA0OHMyMS41IDQ4IDQ4IDQ4IDQ4LTIxLjUgNDgtNDgtMjEuNS00OC00OC00OHptLTMzNiAwYy0yNi41IDAtNDggMjEuNS00OCA0OHMyMS41IDQ4IDQ4IDQ4IDQ4LTIxLjUgNDgtNDgtMjEuNS00OC00OC00OHpcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvc3ZnPlxyXG4gICAgKSxcclxuICAgIFtdLFxyXG4gICk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LWJhcmB9IG9uTW91c2VEb3duPXtoYW5kbGVNb3VzZURvd259PlxyXG4gICAgICB7c3ZnfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyYWdCYXI7XHJcbiJdfQ==