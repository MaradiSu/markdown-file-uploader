"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shortcutsHandle;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

function getCommands() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resulte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  data.forEach(function (item) {
    if (item.children && Array.isArray(item.children)) {
      resulte = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, resulte), getCommands(item.children || []));
    } else if (item.keyCommand && item.shortcuts && item.execute) {
      resulte[item.shortcuts.toLocaleLowerCase()] = item;
    }
  });
  return resulte;
}

function shortcutsHandle(e) {
  var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var commandOrchestrator = arguments.length > 2 ? arguments[2] : undefined;
  var data = getCommands(commands || []);
  var shortcuts = [];

  if (e.altKey) {
    shortcuts.push('alt');
  }

  if (e.shiftKey) {
    shortcuts.push('shift');
  }

  if (e.metaKey) {
    shortcuts.push('cmd');
  }

  if (e.ctrlKey) {
    shortcuts.push('ctrl');
  }

  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push(e.key.toLocaleLowerCase());
  }

  if (shortcuts.length < 2) {
    return;
  }

  var equal = !!data[shortcuts.join('+')];
  var command = equal ? data[shortcuts.join('+')] : undefined;
  Object.keys(data).forEach(function (item) {
    var isequal = item.split('+').every(function (v) {
      if (/ctrlcmd/.test(v)) {
        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
      }

      return shortcuts.includes(v);
    });

    if (isequal) {
      command = data[item];
    }
  });

  if (command && commandOrchestrator) {
    e.stopPropagation();
    e.preventDefault();
    commandOrchestrator.executeCommand(command);
    return;
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL3Nob3J0Y3V0cy50cyJdLCJuYW1lcyI6WyJnZXRDb21tYW5kcyIsImRhdGEiLCJyZXN1bHRlIiwiZm9yRWFjaCIsIml0ZW0iLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJleGVjdXRlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzaG9ydGN1dHNIYW5kbGUiLCJlIiwiY29tbWFuZHMiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiYWx0S2V5IiwicHVzaCIsInNoaWZ0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJsZW5ndGgiLCJ0ZXN0Iiwia2V5IiwiZXF1YWwiLCJqb2luIiwiY29tbWFuZCIsInVuZGVmaW5lZCIsIk9iamVjdCIsImtleXMiLCJpc2VxdWFsIiwic3BsaXQiLCJldmVyeSIsInYiLCJpbmNsdWRlcyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZXhlY3V0ZUNvbW1hbmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsV0FBVCxHQUE4RztBQUFBLE1BQXpGQyxJQUF5Rix1RUFBdEUsRUFBc0U7QUFBQSxNQUFsRUMsT0FBa0UsdUVBQTlCLEVBQThCO0FBQzVHRCxFQUFBQSxJQUFJLENBQUNFLE9BQUwsQ0FBYSxVQUFDQyxJQUFELEVBQVU7QUFDckIsUUFBSUEsSUFBSSxDQUFDQyxRQUFMLElBQWlCQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBSSxDQUFDQyxRQUFuQixDQUFyQixFQUFtRDtBQUNqREgsTUFBQUEsT0FBTywrREFBUUEsT0FBUixHQUFvQkYsV0FBVyxDQUFDSSxJQUFJLENBQUNDLFFBQUwsSUFBaUIsRUFBbEIsQ0FBL0IsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJRCxJQUFJLENBQUNJLFVBQUwsSUFBbUJKLElBQUksQ0FBQ0ssU0FBeEIsSUFBcUNMLElBQUksQ0FBQ00sT0FBOUMsRUFBdUQ7QUFDNURSLE1BQUFBLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDSyxTQUFMLENBQWVFLGlCQUFmLEVBQUQsQ0FBUCxHQUE4Q1AsSUFBOUM7QUFDRDtBQUNGLEdBTkQ7QUFPQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRWMsU0FBU1UsZUFBVCxDQUNiQyxDQURhLEVBSWI7QUFBQSxNQUZBQyxRQUVBLHVFQUZ1QixFQUV2QjtBQUFBLE1BREFDLG1CQUNBO0FBQ0EsTUFBTWQsSUFBSSxHQUFHRCxXQUFXLENBQUNjLFFBQVEsSUFBSSxFQUFiLENBQXhCO0FBQ0EsTUFBTUwsU0FBOEIsR0FBRyxFQUF2Qzs7QUFDQSxNQUFJSSxDQUFDLENBQUNHLE1BQU4sRUFBYztBQUNaUCxJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZSxLQUFmO0FBQ0Q7O0FBQ0QsTUFBSUosQ0FBQyxDQUFDSyxRQUFOLEVBQWdCO0FBQ2RULElBQUFBLFNBQVMsQ0FBQ1EsSUFBVixDQUFlLE9BQWY7QUFDRDs7QUFDRCxNQUFJSixDQUFDLENBQUNNLE9BQU4sRUFBZTtBQUNiVixJQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZSxLQUFmO0FBQ0Q7O0FBQ0QsTUFBSUosQ0FBQyxDQUFDTyxPQUFOLEVBQWU7QUFDYlgsSUFBQUEsU0FBUyxDQUFDUSxJQUFWLENBQWUsTUFBZjtBQUNEOztBQUNELE1BQUlSLFNBQVMsQ0FBQ1ksTUFBVixHQUFtQixDQUFuQixJQUF3QixDQUFDLDJCQUEyQkMsSUFBM0IsQ0FBZ0NULENBQUMsQ0FBQ1UsR0FBRixDQUFNWixpQkFBTixFQUFoQyxDQUE3QixFQUF5RjtBQUN2RkYsSUFBQUEsU0FBUyxDQUFDUSxJQUFWLENBQWVKLENBQUMsQ0FBQ1UsR0FBRixDQUFNWixpQkFBTixFQUFmO0FBQ0Q7O0FBQ0QsTUFBSUYsU0FBUyxDQUFDWSxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBRUQsTUFBSUcsS0FBSyxHQUFHLENBQUMsQ0FBQ3ZCLElBQUksQ0FBQ1EsU0FBUyxDQUFDZ0IsSUFBVixDQUFlLEdBQWYsQ0FBRCxDQUFsQjtBQUNBLE1BQUlDLE9BQU8sR0FBR0YsS0FBSyxHQUFHdkIsSUFBSSxDQUFDUSxTQUFTLENBQUNnQixJQUFWLENBQWUsR0FBZixDQUFELENBQVAsR0FBK0JFLFNBQWxEO0FBRUFDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZNUIsSUFBWixFQUFrQkUsT0FBbEIsQ0FBMEIsVUFBQ0MsSUFBRCxFQUFVO0FBQ2xDLFFBQU0wQixPQUFPLEdBQUcxQixJQUFJLENBQUMyQixLQUFMLENBQVcsR0FBWCxFQUFnQkMsS0FBaEIsQ0FBc0IsVUFBQ0MsQ0FBRCxFQUFPO0FBQzNDLFVBQUksVUFBVVgsSUFBVixDQUFlVyxDQUFmLENBQUosRUFBdUI7QUFDckIsZUFBT3hCLFNBQVMsQ0FBQ3lCLFFBQVYsQ0FBbUIsTUFBbkIsS0FBOEJ6QixTQUFTLENBQUN5QixRQUFWLENBQW1CLEtBQW5CLENBQXJDO0FBQ0Q7O0FBQ0QsYUFBT3pCLFNBQVMsQ0FBQ3lCLFFBQVYsQ0FBbUJELENBQW5CLENBQVA7QUFDRCxLQUxlLENBQWhCOztBQU1BLFFBQUlILE9BQUosRUFBYTtBQUNYSixNQUFBQSxPQUFPLEdBQUd6QixJQUFJLENBQUNHLElBQUQsQ0FBZDtBQUNEO0FBQ0YsR0FWRDs7QUFXQSxNQUFJc0IsT0FBTyxJQUFJWCxtQkFBZixFQUFvQztBQUNsQ0YsSUFBQUEsQ0FBQyxDQUFDc0IsZUFBRjtBQUNBdEIsSUFBQUEsQ0FBQyxDQUFDdUIsY0FBRjtBQUNBckIsSUFBQUEsbUJBQW1CLENBQUNzQixjQUFwQixDQUFtQ1gsT0FBbkM7QUFDQTtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tbWFuZCwgVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yIH0gZnJvbSAnLi4vLi4vY29tbWFuZHMnO1xyXG5cclxuZnVuY3Rpb24gZ2V0Q29tbWFuZHMoZGF0YTogSUNvbW1hbmRbXSA9IFtdLCByZXN1bHRlOiBSZWNvcmQ8c3RyaW5nLCBJQ29tbWFuZD4gPSB7fSk6IFJlY29yZDxzdHJpbmcsIElDb21tYW5kPiB7XHJcbiAgZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICBpZiAoaXRlbS5jaGlsZHJlbiAmJiBBcnJheS5pc0FycmF5KGl0ZW0uY2hpbGRyZW4pKSB7XHJcbiAgICAgIHJlc3VsdGUgPSB7IC4uLnJlc3VsdGUsIC4uLmdldENvbW1hbmRzKGl0ZW0uY2hpbGRyZW4gfHwgW10pIH07XHJcbiAgICB9IGVsc2UgaWYgKGl0ZW0ua2V5Q29tbWFuZCAmJiBpdGVtLnNob3J0Y3V0cyAmJiBpdGVtLmV4ZWN1dGUpIHtcclxuICAgICAgcmVzdWx0ZVtpdGVtLnNob3J0Y3V0cy50b0xvY2FsZUxvd2VyQ2FzZSgpXSA9IGl0ZW07XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHJlc3VsdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNob3J0Y3V0c0hhbmRsZShcclxuICBlOiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+LFxyXG4gIGNvbW1hbmRzOiBJQ29tbWFuZFtdID0gW10sXHJcbiAgY29tbWFuZE9yY2hlc3RyYXRvcj86IFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvcixcclxuKSB7XHJcbiAgY29uc3QgZGF0YSA9IGdldENvbW1hbmRzKGNvbW1hbmRzIHx8IFtdKTtcclxuICBjb25zdCBzaG9ydGN1dHM6IChzdHJpbmcgfCBudW1iZXIpW10gPSBbXTtcclxuICBpZiAoZS5hbHRLZXkpIHtcclxuICAgIHNob3J0Y3V0cy5wdXNoKCdhbHQnKTtcclxuICB9XHJcbiAgaWYgKGUuc2hpZnRLZXkpIHtcclxuICAgIHNob3J0Y3V0cy5wdXNoKCdzaGlmdCcpO1xyXG4gIH1cclxuICBpZiAoZS5tZXRhS2V5KSB7XHJcbiAgICBzaG9ydGN1dHMucHVzaCgnY21kJyk7XHJcbiAgfVxyXG4gIGlmIChlLmN0cmxLZXkpIHtcclxuICAgIHNob3J0Y3V0cy5wdXNoKCdjdHJsJyk7XHJcbiAgfVxyXG4gIGlmIChzaG9ydGN1dHMubGVuZ3RoID4gMCAmJiAhLyhjb250cm9sfGFsdHxtZXRhfHNoaWZ0KS8udGVzdChlLmtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKSkge1xyXG4gICAgc2hvcnRjdXRzLnB1c2goZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSk7XHJcbiAgfVxyXG4gIGlmIChzaG9ydGN1dHMubGVuZ3RoIDwgMikge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IGVxdWFsID0gISFkYXRhW3Nob3J0Y3V0cy5qb2luKCcrJyldO1xyXG4gIGxldCBjb21tYW5kID0gZXF1YWwgPyBkYXRhW3Nob3J0Y3V0cy5qb2luKCcrJyldIDogdW5kZWZpbmVkO1xyXG5cclxuICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICBjb25zdCBpc2VxdWFsID0gaXRlbS5zcGxpdCgnKycpLmV2ZXJ5KCh2KSA9PiB7XHJcbiAgICAgIGlmICgvY3RybGNtZC8udGVzdCh2KSkge1xyXG4gICAgICAgIHJldHVybiBzaG9ydGN1dHMuaW5jbHVkZXMoJ2N0cmwnKSB8fCBzaG9ydGN1dHMuaW5jbHVkZXMoJ2NtZCcpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzaG9ydGN1dHMuaW5jbHVkZXModik7XHJcbiAgICB9KTtcclxuICAgIGlmIChpc2VxdWFsKSB7XHJcbiAgICAgIGNvbW1hbmQgPSBkYXRhW2l0ZW1dO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGlmIChjb21tYW5kICYmIGNvbW1hbmRPcmNoZXN0cmF0b3IpIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb21tYW5kT3JjaGVzdHJhdG9yLmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=