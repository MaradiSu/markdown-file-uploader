"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.italic = void 0;

var React = _interopRequireWildcard(require("react"));

var _markdownUtils = require("../utils/markdownUtils");

var italic = {
  name: 'italic',
  keyCommand: 'italic',
  shortcuts: 'ctrlcmd+i',
  buttonProps: {
    'aria-label': 'Add italic text',
    title: 'Add italic text'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    "data-name": "italic",
    width: "12",
    height: "12",
    role: "img",
    viewBox: "0 0 320 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the italic mark up

    var state2 = api.replaceSelection("*".concat(state1.selectedText, "*")); // Adjust the selection to not contain the *

    api.setSelectionRange({
      start: state2.selection.end - 1 - state1.selectedText.length,
      end: state2.selection.end - 1
    });
  }
};
exports.italic = italic;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pdGFsaWMudHN4Il0sIm5hbWVzIjpbIml0YWxpYyIsIm5hbWUiLCJrZXlDb21tYW5kIiwic2hvcnRjdXRzIiwiYnV0dG9uUHJvcHMiLCJ0aXRsZSIsImljb24iLCJleGVjdXRlIiwic3RhdGUiLCJhcGkiLCJuZXdTZWxlY3Rpb25SYW5nZSIsInRleHQiLCJzZWxlY3Rpb24iLCJzdGF0ZTEiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInN0YXRlMiIsInJlcGxhY2VTZWxlY3Rpb24iLCJzZWxlY3RlZFRleHQiLCJzdGFydCIsImVuZCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRU8sSUFBTUEsTUFBZ0IsR0FBRztBQUM5QkMsRUFBQUEsSUFBSSxFQUFFLFFBRHdCO0FBRTlCQyxFQUFBQSxVQUFVLEVBQUUsUUFGa0I7QUFHOUJDLEVBQUFBLFNBQVMsRUFBRSxXQUhtQjtBQUk5QkMsRUFBQUEsV0FBVyxFQUFFO0FBQUUsa0JBQWMsaUJBQWhCO0FBQW1DQyxJQUFBQSxLQUFLLEVBQUU7QUFBMUMsR0FKaUI7QUFLOUJDLEVBQUFBLElBQUksZUFDRjtBQUFLLGlCQUFVLFFBQWY7QUFBd0IsSUFBQSxLQUFLLEVBQUMsSUFBOUI7QUFBbUMsSUFBQSxNQUFNLEVBQUMsSUFBMUM7QUFBK0MsSUFBQSxJQUFJLEVBQUMsS0FBcEQ7QUFBMEQsSUFBQSxPQUFPLEVBQUM7QUFBbEUsa0JBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxjQURQO0FBRUUsSUFBQSxDQUFDLEVBQUM7QUFGSixJQURGLENBTjRCO0FBYTlCQyxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEtBQUQsRUFBbUJDLEdBQW5CLEVBQW9DO0FBQzNDO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUcsK0JBQVc7QUFBRUMsTUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNHLElBQWQ7QUFBb0JDLE1BQUFBLFNBQVMsRUFBRUosS0FBSyxDQUFDSTtBQUFyQyxLQUFYLENBQTFCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixHQUFHLENBQUNLLGlCQUFKLENBQXNCSixpQkFBdEIsQ0FBZixDQUgyQyxDQUkzQzs7QUFDQSxRQUFNSyxNQUFNLEdBQUdOLEdBQUcsQ0FBQ08sZ0JBQUosWUFBeUJILE1BQU0sQ0FBQ0ksWUFBaEMsT0FBZixDQUwyQyxDQU0zQzs7QUFDQVIsSUFBQUEsR0FBRyxDQUFDSyxpQkFBSixDQUFzQjtBQUNwQkksTUFBQUEsS0FBSyxFQUFFSCxNQUFNLENBQUNILFNBQVAsQ0FBaUJPLEdBQWpCLEdBQXVCLENBQXZCLEdBQTJCTixNQUFNLENBQUNJLFlBQVAsQ0FBb0JHLE1BRGxDO0FBRXBCRCxNQUFBQSxHQUFHLEVBQUVKLE1BQU0sQ0FBQ0gsU0FBUCxDQUFpQk8sR0FBakIsR0FBdUI7QUFGUixLQUF0QjtBQUlEO0FBeEI2QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFwaSB9IGZyb20gJy4vJztcclxuaW1wb3J0IHsgc2VsZWN0V29yZCB9IGZyb20gJy4uL3V0aWxzL21hcmtkb3duVXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGl0YWxpYzogSUNvbW1hbmQgPSB7XHJcbiAgbmFtZTogJ2l0YWxpYycsXHJcbiAga2V5Q29tbWFuZDogJ2l0YWxpYycsXHJcbiAgc2hvcnRjdXRzOiAnY3RybGNtZCtpJyxcclxuICBidXR0b25Qcm9wczogeyAnYXJpYS1sYWJlbCc6ICdBZGQgaXRhbGljIHRleHQnLCB0aXRsZTogJ0FkZCBpdGFsaWMgdGV4dCcgfSxcclxuICBpY29uOiAoXHJcbiAgICA8c3ZnIGRhdGEtbmFtZT1cIml0YWxpY1wiIHdpZHRoPVwiMTJcIiBoZWlnaHQ9XCIxMlwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDMyMCA1MTJcIj5cclxuICAgICAgPHBhdGhcclxuICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcclxuICAgICAgICBkPVwiTTIwNC43NTggNDE2aC0zMy44NDlsNjIuMDkyLTMyMGg0MC43MjVhMTYgMTYgMCAwIDAgMTUuNzA0LTEyLjkzN2w2LjI0Mi0zMkMyOTcuNTk5IDQxLjE4NCAyOTAuMDM0IDMyIDI3OS45NjggMzJIMTIwLjIzNWExNiAxNiAwIDAgMC0xNS43MDQgMTIuOTM3bC02LjI0MiAzMkM5Ni4zNjIgODYuODE2IDEwMy45MjcgOTYgMTEzLjk5MyA5NmgzMy44NDZsLTYyLjA5IDMyMEg0Ni4yNzhhMTYgMTYgMCAwIDAtMTUuNzA0IDEyLjkzNWwtNi4yNDUgMzJDMjIuNDAyIDQ3MC44MTUgMjkuOTY3IDQ4MCA0MC4wMzQgNDgwaDE1OC40NzlhMTYgMTYgMCAwIDAgMTUuNzA0LTEyLjkzNWw2LjI0NS0zMmMxLjkyNy05Ljg4LTUuNjM4LTE5LjA2NS0xNS43MDQtMTkuMDY1elwiXHJcbiAgICAgIC8+XHJcbiAgICA8L3N2Zz5cclxuICApLFxyXG4gIGV4ZWN1dGU6IChzdGF0ZTogVGV4dFN0YXRlLCBhcGk6IFRleHRBcGkpID0+IHtcclxuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIGVuY29tcGFzcyB0aGUgd2hvbGUgd29yZCBpZiB0aGUgY2FyZXQgaXMgaW5zaWRlIG9uZVxyXG4gICAgY29uc3QgbmV3U2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3RXb3JkKHsgdGV4dDogc3RhdGUudGV4dCwgc2VsZWN0aW9uOiBzdGF0ZS5zZWxlY3Rpb24gfSk7XHJcbiAgICBjb25zdCBzdGF0ZTEgPSBhcGkuc2V0U2VsZWN0aW9uUmFuZ2UobmV3U2VsZWN0aW9uUmFuZ2UpO1xyXG4gICAgLy8gUmVwbGFjZXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIGl0YWxpYyBtYXJrIHVwXHJcbiAgICBjb25zdCBzdGF0ZTIgPSBhcGkucmVwbGFjZVNlbGVjdGlvbihgKiR7c3RhdGUxLnNlbGVjdGVkVGV4dH0qYCk7XHJcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBub3QgY29udGFpbiB0aGUgKlxyXG4gICAgYXBpLnNldFNlbGVjdGlvblJhbmdlKHtcclxuICAgICAgc3RhcnQ6IHN0YXRlMi5zZWxlY3Rpb24uZW5kIC0gMSAtIHN0YXRlMS5zZWxlY3RlZFRleHQubGVuZ3RoLFxyXG4gICAgICBlbmQ6IHN0YXRlMi5zZWxlY3Rpb24uZW5kIC0gMSxcclxuICAgIH0pO1xyXG4gIH0sXHJcbn07XHJcbiJdfQ==